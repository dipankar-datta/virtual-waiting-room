{"version":3,"sources":["components/home.tsx","components/waiting-room.tsx","App.tsx","index.tsx"],"names":["Home","className","React","Component","WaitingRoom","props","STRESS_CHECK_PATH","RECHECK_PERIOD","intervalRef","redirectBack","state","redirectUrl","clearInterval","window","location","replace","checkApplicationStressStatus","recheckPeriod","setState","rechecking","url","redirectHostname","fetch","then","res","ok","json","status","setErrorMessage","catch","err","checkStatusClass","recheckMessages","Object","assign","messagePrefix","length","Date","toLocaleTimeString","toUpperCase","statusMessage","role","push","stopRecheck","startRecheck","setInterval","clearLog","resourceStatus","redirectInfo","URLSearchParams","this","search","get","atob","JSON","parse","URL","origin","setTimeout","style","padding","type","onClick","indexOf","marginTop","slice","reverse","map","message","App","backgroundColor","height","color","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c2aee4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nexport default class Home extends React.Component<any, any> {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"horizontal-center\">\r\n        <h2></h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport '../App.css';\r\n\r\ninterface WaitingRoomState {\r\n  recheckPeriod: number;\r\n  redirectUrl?: string;\r\n  redirectHostname?: string;\r\n  recheckStatus?: string;\r\n  recheckMessages: any[];\r\n  rechecking: 'stop' | 'start' | 'checking';\r\n  resourceStatus?: 'busy' | 'unavailable'\r\n}\r\n\r\nexport default class WaitingRoom extends React.Component<any, WaitingRoomState> {\r\n\r\n  private readonly STRESS_CHECK_PATH = '/api/can_serve';\r\n\r\n  private readonly RECHECK_PERIOD = 5;\r\n\r\n  private intervalRef : any;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      recheckPeriod: this.RECHECK_PERIOD,\r\n      recheckMessages: [],\r\n      rechecking: 'start',\r\n      resourceStatus: 'busy'\r\n    };\r\n  }  \r\n\r\n  redirectBack = () => {\r\n    if (this.state.redirectUrl) {\r\n      clearInterval(this.intervalRef);\r\n      window.location.replace(this.state.redirectUrl);\r\n    }    \r\n  }\r\n\r\n  componentDidMount() {\r\n    const query = new URLSearchParams(this.props.location.search);\r\n    let redirectInfo: any = query.get('redirectInfo');\r\n    if (redirectInfo) {\r\n      redirectInfo = atob(redirectInfo);\r\n      redirectInfo = JSON.parse(redirectInfo);\r\n    }\r\n    const redirectUrl =  redirectInfo['redirectUrl'];\r\n    const resourceStatus =  redirectInfo['appCheckStatus'];\r\n    const redirectHostname = new URL(redirectUrl).origin;\r\n    setTimeout(() => {\r\n      this.setState({...this.state, redirectUrl, resourceStatus, redirectHostname}) ;\r\n      this.startRecheck();\r\n    }, 200);\r\n  }\r\n\r\n  checkApplicationStressStatus = () => {\r\n\r\n    if (this.state.recheckPeriod > 0) {\r\n      this.setState({...this.state, recheckPeriod: (this.state.recheckPeriod - 1)})\r\n    } else if (this.state.recheckPeriod === 0 && this.state.rechecking === 'start') {\r\n\r\n      this.setState({...this.state, rechecking: 'checking'});\r\n      const url = this.state.redirectHostname + this.STRESS_CHECK_PATH;\r\n\r\n      fetch(url)\r\n      .then((res: Response) => {\r\n        if (res.ok) {\r\n          res.json().then((status: boolean) => {\r\n            if (status) {           \r\n              clearInterval(this.intervalRef);\r\n              this.redirectBack();\r\n            } else {\r\n              this.setState({...this.state, rechecking: 'start'});\r\n              this.setErrorMessage('busy');\r\n            }\r\n          })\r\n        } else {\r\n          this.setState({...this.state, rechecking: 'start'});\r\n          this.setErrorMessage('failed');\r\n        }        \r\n      }).catch(err => {\r\n        this.setState({...this.state, rechecking: 'start'});\r\n        this.setErrorMessage('failed');\r\n      });      \r\n    } \r\n  }\r\n\r\n  setErrorMessage = (status: 'success' | 'busy' | 'failed') => {\r\n    const recheckMessages = Object.assign([], this.state.recheckMessages);\r\n    const messagePrefix =  (recheckMessages.length + 1) \r\n                          + ' - Last checked at: ' \r\n                          + (new Date().toLocaleTimeString()) \r\n                          + ' - Status: ' + status.toUpperCase();\r\n    let checkStatusClass;    \r\n    switch(status) {\r\n      case 'failed' : checkStatusClass = \"alert alert-danger\"; break;\r\n      case 'busy' : checkStatusClass = \"alert alert-info\"; break;\r\n      case 'success' : checkStatusClass = \"alert alert-success\"; break;\r\n    }\r\n    const statusMessage = <div className={checkStatusClass} role=\"alert\">{messagePrefix}</div>;\r\n    recheckMessages.push(statusMessage);\r\n    this.setState({...this.state, recheckMessages, recheckPeriod: this.RECHECK_PERIOD})\r\n  }\r\n\r\n  stopRecheck = () => {\r\n    clearInterval(this.intervalRef);\r\n    this.setState({...this.state, rechecking: 'stop'});\r\n  }\r\n\r\n  startRecheck = () => {\r\n    this.intervalRef = setInterval(this.checkApplicationStressStatus, 1000);\r\n    this.setState({...this.state, rechecking: 'start', recheckPeriod: this.RECHECK_PERIOD});\r\n  }\r\n\r\n  clearLog = () => {\r\n    this.setState({...this.state, recheckMessages: []})\r\n  }\r\n  \r\n  render() {    \r\n  \r\n    return (\r\n      <div>\r\n          <div>\r\n            <h3>Resource {this.state.resourceStatus === 'unavailable' ? 'Unavailable' : 'Busy'}</h3>\r\n            <p>Your requested application is \r\n              currently {this.state.resourceStatus}. Once the requested application \r\n              is available, you will be redirected back.\r\n            </p>\r\n          </div>\r\n          <h6>Requested application URL: {this.state.redirectUrl}</h6>          \r\n          <div className='horizontal-center' style={{padding: \"20px\"}}>\r\n            <div className='horizontal-center'>\r\n            <button \r\n              type=\"button\" \r\n              className=\"btn btn-danger\" \r\n              onClick={this.redirectBack} >Go Back</button> &nbsp;&nbsp;\r\n\r\n            {\r\n              ['start', 'checking'].indexOf(this.state.rechecking) >= 0 ? \r\n              <button  \r\n                type=\"button\" \r\n                className=\"btn btn-danger\" \r\n                onClick={this.stopRecheck} >Stop Recheck</button>\r\n              :\r\n              <button  \r\n                type=\"button\" \r\n                className=\"btn btn-danger\" \r\n                onClick={this.startRecheck} >Start Recheck</button>\r\n            }\r\n            &nbsp;&nbsp;            \r\n            <button \r\n              type=\"button\" \r\n              className=\"btn btn-danger\" \r\n              onClick={this.clearLog} >Clear Log</button>\r\n            \r\n            </div>\r\n            \r\n            <div className='horizontal-center'>\r\n              <h6>Only for demonstration</h6>\r\n            </div>            \r\n          </div>       \r\n          {this.state.rechecking === 'start' ? \r\n            <h6>Next Application status check in - {this.state.recheckPeriod} seconds</h6> : ''\r\n          } \r\n          {this.state.rechecking === 'checking' ? \r\n            <h6>Checking application</h6> : ''\r\n          }  \r\n          \r\n          {this.state.recheckMessages.length > 0 ? \r\n            (\r\n              <div style={{marginTop: \"20px\"}}>\r\n                <table>\r\n                <tbody>\r\n                  {this.state.recheckMessages.slice().reverse().map((message) => \r\n                  <tr><td>{message}</td></tr>)}\r\n                </tbody>\r\n                </table>              \r\n              </div>\r\n            ) : ''            \r\n          } \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Switch, Route} from 'react-router-dom';\nimport Home from './components/home';\nimport WaitingRoom from './components/waiting-room';\n\nexport default class App extends React.Component<any, any> {\n  \n  render() {\n    return (\n      <div >\n          <div style={{backgroundColor: \"black\", height: \"55px\"}}>\n            <div className='horizontal-center'>\n              <h3 style={{color: \"cornsilk\", marginTop: \"10px\"}}>Virtual Waiting Room</h3>\n            </div>\n          </div>\n\n          <div style={{padding: \"20px 20px\"}}>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/wait\" component={WaitingRoom} />\n            </Switch>\n          </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {HashRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);"],"sourceRoot":""}